Junit- Maven Peoject  group id arificat id 
pom.xml->dependencies/properties/plugins
To use JUnit in a Maven project, add the following dependencies to your pom.xml:

<properties>
    <junit.jupiter.version>5.8.1</junit.jupiter.version>
</properties>
<dependencies>
    <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter</artifactId>
        <version>${junit.jupiter.version}</version>
        <scope>test</scope>
    </dependency>
</dependencies>
<build>
    <plugins>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>2.22.2</version>
        </plugin>
    </plugins>
</build>


main -java class 
test file :JUnit creates a single instance of the test class for all the tests in that class. Annotations in it:  @BeforeAll , @BeforeEach, @Test, @AfterEach 
@BeforeAll - executes only once before anything else in Junit test class before even calling object of test class so it should be static  like static void anyname(){};,
@BeforeEach - it executes before each test so the for class u want to get,give the object declaration before @Test and assignment in this & other things yyou want to do , 
@Test :assertEquals : assertEquals(expected, actual): Checks if two values are equal. ,assertTrue,assertFalse,AssertArrayEquals : assertArrayEquals(expectedArray, actualArray): Checks if two arrays are equal.,assertTimeout : assertTimeout(duration, executable)- used for performance evaluation,assertThrows(expectedType, executable): Asserts that a specific exception is thrown.
@AfterEach - executes after every @Test
@AfterAll - executes only once after anything else in Junit test class  it should be static  like static void anyname(){};,
@AfterAll method does not have access to instance variables of the test class because it is static. This is appropriate since the method is meant to perform cleanup or finalization tasks that do not depend on the state of a specific instance of the test class.
New instance of the test class is created for each test method. This means that instance variables are not shared between tests. to avoid these before test class(not before annotation test) we need to give annotation @TestInstance(TestInstance.Lifecycle.PER_CLASS)
When you specify @TestInstance(TestInstance.Lifecycle.PER_CLASS), JUnit will create a single instance of the test class for all test methods. This allows you to use instance variables and methods without needing to declare them as static.
even @BeforeAll ,@AfterAll doesn't need static declaration anymore if we use  @TestInstance(TestInstance.Lifecycle.PER_CLASS)

example of a teat class :

import org.junit.jupiter.api.*;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class MyTests {

    private int counter;

    @BeforeAll
    void setup() {
        // This method can be non-static
        counter = 0;
        System.out.println("Setup: Counter initialized to " + counter);
    }

    @BeforeEach
    void init() {
        // This method runs before each test
        System.out.println("Before Each Test: Counter = " + counter);
    }

    @Test
    void testIncrement() {
        counter++;
        Assertions.assertEquals(1, counter);
        System.out.println("Test Increment: Counter = " + counter);
    }

    @Test
    void testDecrement() {
        counter--;
        Assertions.assertEquals(-1, counter);
        System.out.println("Test Decrement: Counter = " + counter);
    }

    @AfterEach
    void cleanup() {
        // This method runs after each test
        System.out.println("After Each Test: Counter = " + counter);
    }

    @AfterAll
    void tearDown() {
        // This method can be non-static
        System.out.println("Tear Down: Final Counter Value = " + counter);
    }
}

for more info on junit : https://junit.org/junit5/docs/current/user-guide/
